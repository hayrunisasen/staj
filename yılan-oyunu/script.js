const canvas = document.getElementById("gameCanvas"); // Canvas elementini al
const ctx = canvas.getContext("2d"); // 2D Ã§izim baÄŸlamÄ±nÄ± al
const startBtn = document.getElementById("startBtn"); // BaÅŸlat butonu
const restartBtn = document.getElementById("restartBtn"); // Tekrar oyna butonu
const menu = document.getElementById("menu"); // MenÃ¼ divi
const gameContainer = document.getElementById("gameContainer"); // Oyun alanÄ± divi
const scoreEl = document.getElementById("score"); // Puan gÃ¶sterge alanÄ±
const highScoreEl = document.getElementById("highScore"); // En yÃ¼ksek puan gÃ¶sterge alanÄ±

let snake = []; // YÄ±lan parÃ§alarÄ±nÄ± tutan dizi
let apple = {}; // Elma objesi
let dx = 0; // X eksenindeki hareket yÃ¶nÃ¼ (-1,0,1)
let dy = 0; // Y eksenindeki hareket yÃ¶nÃ¼ (-1,0,1)
let score = 0; // GÃ¼ncel puan
let highScore = localStorage.getItem("highScore") || 0; // KaydedilmiÅŸ en yÃ¼ksek puan, yoksa 0
let interval; // Oyun dÃ¶ngÃ¼sÃ¼nÃ¼ kontrol eden interval ID
const gridSize = 20; // Her bir yÄ±lan parÃ§asÄ±nÄ±n bÃ¼yÃ¼klÃ¼ÄŸÃ¼ (px)
const tileCountX = canvas.width / gridSize; // X eksenindeki kare sayÄ±sÄ±
const tileCountY = canvas.height / gridSize; // Y eksenindeki kare sayÄ±sÄ±

function spawnApple() { // Yeni elma konumu oluÅŸturur
  apple = {
    x: Math.floor(Math.random() * tileCountX), // Rastgele X koordinatÄ±
    y: Math.floor(Math.random() * tileCountY), // Rastgele Y koordinatÄ±
  };
}

function startGame() { // Oyunu baÅŸlatan fonksiyon
  menu.classList.add("hidden"); // MenÃ¼ gizle
  restartBtn.classList.add("hidden"); // Tekrar oyna butonunu gizle
  gameContainer.classList.remove("hidden"); // Oyun alanÄ±nÄ± gÃ¶ster
  snake = [{ x: 10, y: 10 }]; // YÄ±lanÄ±n baÅŸlangÄ±Ã§ pozisyonu
  dx = 1; // BaÅŸlangÄ±Ã§ta saÄŸa doÄŸru hareket
  dy = 0;
  score = 0; // Puan sÄ±fÄ±rla
  spawnApple(); // ElmayÄ± yerleÅŸtir
  updateScores(); // SkorlarÄ± gÃ¼ncelle
  if (interval) clearInterval(interval); // Ã–nceki interval varsa temizle
  interval = setInterval(drawGame, 100); // Oyun dÃ¶ngÃ¼sÃ¼nÃ¼ baÅŸlat (her 100ms)
}

function drawGame() { // Oyun ekranÄ±nÄ± Ã§iz ve gÃ¼ncelle
  moveSnake(); // YÄ±lanÄ± hareket ettir

  if (isGameOver()) { // EÄŸer oyun bittiyse
    gameOver(); // Oyun bitiÅŸ fonksiyonunu Ã§alÄ±ÅŸtÄ±r
    return; // Daha fazla iÅŸlem yapma
  }

  ctx.fillStyle = "#111"; // Arka plan rengi koyu siyah
  ctx.fillRect(0, 0, canvas.width, canvas.height); // Arka planÄ± temizle

  snake.forEach((part, i) => { // YÄ±lanÄ±n her parÃ§asÄ± iÃ§in
    const isHead = i === 0; // Ä°lk parÃ§a baÅŸ olarak kabul edilir
    const cx = part.x * gridSize + gridSize / 2; // ParÃ§anÄ±n merkez X koordinatÄ±
    const cy = part.y * gridSize + gridSize / 2; // ParÃ§anÄ±n merkez Y koordinatÄ±
    const r = gridSize / 2 - 2; // YarÄ±Ã§ap (kenarlara 2px boÅŸluk)

    ctx.beginPath(); // Yeni ÅŸekil baÅŸlat
    const greenVal = 255 - i * 10; // YÄ±lan gÃ¶vdesi iÃ§in yeÅŸil renk tonunu ayarla (baÅŸ parlak)
    ctx.fillStyle = isHead ? "#0ff" : `rgb(0,${Math.max(greenVal, 80)},0)`; // BaÅŸ farklÄ± renk (#0ff), gÃ¶vde tonlama
    ctx.arc(cx, cy, r, 0, Math.PI * 2); // Daire Ã§iz (parÃ§a)
    ctx.fill(); // Daireyi doldur

    if (isHead) { // EÄŸer parÃ§a baÅŸ ise
      ctx.fillStyle = "white"; // GÃ¶z beyazlarÄ± iÃ§in renk ayarla
      ctx.beginPath();
      ctx.arc(cx - 4, cy - 4, 2, 0, Math.PI * 2); // Sol gÃ¶z beyazÄ±
      ctx.fill();
      ctx.beginPath();
      ctx.arc(cx + 4, cy - 4, 2, 0, Math.PI * 2); // SaÄŸ gÃ¶z beyazÄ±
      ctx.fill();

      ctx.fillStyle = "black"; // GÃ¶z bebekleri iÃ§in siyah renk
      ctx.beginPath();
      ctx.arc(cx - 4, cy - 4, 1, 0, Math.PI * 2); // Sol gÃ¶z bebeÄŸi
      ctx.fill();
      ctx.beginPath();
      ctx.arc(cx + 4, cy - 4, 1, 0, Math.PI * 2); // SaÄŸ gÃ¶z bebeÄŸi
      ctx.fill();
    }
  });

  ctx.fillStyle = "red"; // Elma rengi kÄ±rmÄ±zÄ±
  ctx.fillRect(apple.x * gridSize, apple.y * gridSize, gridSize - 2, gridSize - 2); // ElmalarÄ± Ã§iz

  updateScores(); // SkorlarÄ± ekranda gÃ¼ncelle
}

function moveSnake() { // YÄ±lanÄ± hareket ettirir
  const head = { x: snake[0].x + dx, y: snake[0].y + dy }; // Yeni kafa pozisyonu
  snake.unshift(head); // YÄ±lanÄ±n baÅŸÄ±na ekle

  if (head.x === apple.x && head.y === apple.y) { // EÄŸer elmayÄ± yediyse
    score++; // Puan artÄ±r
    spawnApple(); // Yeni elma oluÅŸtur
  } else {
    snake.pop(); // Kuyruk parÃ§asÄ±nÄ± kaldÄ±r (yemediÄŸi iÃ§in)
  }
}

function isGameOver() { // Oyun bitiÅŸ koÅŸullarÄ±nÄ± kontrol et
  const head = snake[0]; // YÄ±lanÄ±n baÅŸÄ±
  if (head.x < 0 || head.y < 0 || head.x >= tileCountX || head.y >= tileCountY) { // Duvara Ã§arptÄ± mÄ±?
    return true;
  }
  for (let i = 1; i < snake.length; i++) { // Kendi Ã¼zerine geldi mi?
    if (head.x === snake[i].x && head.y === snake[i].y) {
      return true;
    }
  }
  return false; // Oyun devam ediyor
}

function gameOver() { // Oyun bittiÄŸinde Ã§aÄŸrÄ±lÄ±r
  clearInterval(interval); // Oyun dÃ¶ngÃ¼sÃ¼nÃ¼ durdur

  ctx.fillStyle = "rgba(0,0,0,0.7)"; // YarÄ± ÅŸeffaf koyu katman
  ctx.fillRect(0, 0, canvas.width, canvas.height); // EkranÄ± kapla

  ctx.fillStyle = "white"; // YazÄ± rengi beyaz
  ctx.font = "bold 60px Arial"; // BÃ¼yÃ¼k ve kalÄ±n font
  ctx.textAlign = "center"; // Ortala
  ctx.fillText("ğŸ’¥ Oyun Bitti!", canvas.width / 2, canvas.height / 2 - 20); // BaÅŸlÄ±k yazÄ±sÄ±

  ctx.font = "bold 30px Arial"; // Daha kÃ¼Ã§Ã¼k font
  ctx.fillText(`PuanÄ±nÄ±z: ${score}`, canvas.width / 2, canvas.height / 2 + 30); // PuanÄ± gÃ¶ster

  restartBtn.classList.remove("hidden"); // Tekrar oyna butonunu gÃ¶ster
}

function updateScores() { // Puan ve yÃ¼ksek puanÄ± gÃ¼nceller
  scoreEl.textContent = `Puan: ${score}`; // GÃ¼ncel puan gÃ¶ster
  if (score > highScore) { // Yeni yÃ¼ksek puan varsa
    highScore = score; // YÃ¼ksek puanÄ± gÃ¼ncelle
    localStorage.setItem("highScore", highScore); // Local storage'a kaydet
  }
  highScoreEl.textContent = `En YÃ¼ksek Puan: ${highScore}`; // YÃ¼ksek puanÄ± gÃ¶ster
}

document.addEventListener("keydown", (e) => { // Klavyeden yÃ¶n tuÅŸlarÄ± dinleniyor
  if (e.key === "ArrowUp" && dy === 0) { // YukarÄ± tuÅŸu, sadece aÅŸaÄŸÄ± deÄŸilse
    dx = 0;
    dy = -1;
  } else if (e.key === "ArrowDown" && dy === 0) { // AÅŸaÄŸÄ± tuÅŸu, sadece yukarÄ± deÄŸilse
    dx = 0;
    dy = 1;
  } else if (e.key === "ArrowLeft" && dx === 0) { // Sol tuÅŸu, sadece saÄŸ deÄŸilse
    dx = -1;
    dy = 0;
  } else if (e.key === "ArrowRight" && dx === 0) { // SaÄŸ tuÅŸu, sadece sol deÄŸilse
    dx = 1;
    dy = 0;
  }
});

startBtn.addEventListener("click", startGame); // BaÅŸlat butonuna tÄ±klanÄ±nca oyunu baÅŸlat
restartBtn.addEventListener("click", startGame); // Tekrar oyna butonuna tÄ±klanÄ±nca oyunu baÅŸlat
